#version 330

in vec4 vCol;
in vec2 textureCoordinate;
in vec3 Normal;
in vec3 FragmentPosition;
in vec4 DirectionalLightSpacePosition;

out vec4 color;

const int MAX_POINT_LIGHTS = 3;
const int MAX_SPOT_LIGHTS = 3;

struct Light
{
	vec3 color;
	float ambientIntensity;
	float diffuseIntensity;
};

struct DirectionalLight
{
	Light base;
	vec3 direction;
};

struct PointLight
{
	Light base;
	vec3 position;
	float constant;
	float linear;
	float exponent;
};

struct SpotLight
{
	PointLight base;
	vec3 direction;
	float edge;
};

struct Material
{
	float specularIntensity;
	float shininess;
};

uniform int pointLightCount;
uniform int spotLightCount;

uniform DirectionalLight directionalLight;
uniform PointLight pointLights[MAX_POINT_LIGHTS];
uniform SpotLight spotLights[MAX_SPOT_LIGHTS];

uniform sampler2D theTexture;
uniform sampler2D directionalShadowMap;
uniform Material material;

uniform vec3 cameraPosition;

float CalculateDirectionalShadowFactor(DirectionalLight light)
{
	vec3 projectionCoordinates = DirectionalLightSpacePosition.xyz / DirectionalLightSpacePosition.w;
	projectionCoordinates = (projectionCoordinates * 0.5) + 0.5;

	float closestDepth = texture(directionalShadowMap, projectionCoordinates.xy).r;
	float currentDepth = projectionCoordinates.z;

	vec3 normal = normalize(Normal);
	vec3 lightDirection = normalize(light.direction);

	float bias = max(0.05 * (1 - dot(normal, lightDirection)), 0.005);

	float shadow = 0.0;

	vec2 texelSize = 1.0 / textureSize(directionalShadowMap, 0);

	for(int x = -1; x <= 1; x++)
	{
		for (int y = -1; y <= 1; y++)
		{
			float pcfDepth = texture(directionalShadowMap, projectionCoordinates.xy + vec2(x, y) * texelSize).r;
			shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;
		}
	}

	shadow /= 9.0;

	if (projectionCoordinates.z > 1.0)
	{
		shadow = 0.0;
	}

	return shadow;
}

vec4 CalculateLightByDirection(Light light, vec3 direction, float shadowFactor)
{
	vec4 ambientColor = vec4(light.color, 1.0f) * light.ambientIntensity;

	float diffuseFactor = max(dot(normalize(Normal), normalize(direction)), 0.0f);
	vec4 diffuseColor = vec4(light.color, 1.0f) * light.diffuseIntensity * diffuseFactor;

	vec4 specularColor = vec4(0, 0, 0, 0);

	if (diffuseFactor > 0.0f)
	{
		vec3 fragmentToCamera = normalize(cameraPosition - FragmentPosition);
		vec3 reflectedVertex = normalize(reflect(direction, normalize(Normal)));

		float specularFactor = dot(fragmentToCamera, reflectedVertex);

		if (specularFactor > 0.0f)
		{
			specularFactor = pow(specularFactor, material.shininess);
			specularColor = vec4(light.color * material.specularIntensity * specularFactor, 1.0f);
		}
	}

	return (ambientColor + (1.0 - shadowFactor) * (diffuseColor + specularColor));
}

vec4 CalculateDirectionalLight()
{
	float shadowFactor = CalculateDirectionalShadowFactor(directionalLight);
	return CalculateLightByDirection(directionalLight.base, directionalLight.direction, shadowFactor);
}

vec4 CalculatePointLight(PointLight pLight)
{
		vec3 direction = FragmentPosition - pLight.position;
		float distance = length(direction);
		direction = normalize(direction);

		vec4 color = CalculateLightByDirection(pLight.base, direction, 0.0f);
		float attenuation = pLight.exponent * distance * distance +
							pLight.linear * distance +
							pLight.constant;

		return (color / attenuation);
}

vec4 CalculatePointLights()
{
	vec4 totalColor = vec4(0, 0, 0, 0);
	for(int i = 0; i < pointLightCount; i++)
	{
		totalColor += CalculatePointLight(pointLights[i]);
	}

	return totalColor;
}

vec4 CalculateSpotLight(SpotLight sLight)
{
	vec3 rayDirection = normalize(FragmentPosition - sLight.base.position);
	float slFactor = dot(rayDirection, sLight.direction);

	if(slFactor > sLight.edge)
	{
		vec4 color = CalculatePointLight(sLight.base);

		return color * (1.0f - (1.0f - slFactor) * (1.0f/(1.0f - sLight.edge)));
	}
	else 
	{
		return vec4 (0, 0, 0, 0);
	}
}

vec4 CalculateSpotLights()
{
	vec4 totalColor = vec4(0, 0, 0, 0);
	for(int i = 0; i < spotLightCount; i++)
	{
		totalColor += CalculateSpotLight(spotLights[i]);
	}

	return totalColor;
}

void main()
{
	vec4 finalColor = CalculateDirectionalLight();
	finalColor += CalculatePointLights();
	finalColor += CalculateSpotLights();

	color = texture(theTexture, textureCoordinate) * finalColor;
}
